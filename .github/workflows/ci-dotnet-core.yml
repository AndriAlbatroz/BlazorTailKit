name: CI BlazorWindKit.Core

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

permissions:
  contents: read
  packages: write

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: '1'

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository (full clone)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies (BlazorWindKit.Core)
        run: |
          echo "::group::🔧 Restore BlazorWindKit.Core"
          dotnet restore BlazorWindKit.Core/BlazorWindKit.Core.csproj --verbosity minimal
          echo "::endgroup::"

      - name: Restore dependencies (BlazorWindKit.Core.Tests)
        run: |
          echo "::group::🔧 Restore BlazorWindKit.Core.Tests"
          dotnet restore BlazorWindKit.Core.Tests/BlazorWindKit.Core.Tests.csproj --verbosity minimal
          echo "::endgroup::"

      - name: Build BlazorWindKit.Core
        run: |
          echo "::group::🔨 Build BlazorWindKit.Core"
          dotnet build BlazorWindKit.Core/BlazorWindKit.Core.csproj --configuration Release --no-restore --verbosity minimal
          echo "::endgroup::"

      - name: Build BlazorWindKit.Core.Tests
        run: |
          echo "::group::🔨 Build BlazorWindKit.Core.Tests"
          dotnet build BlazorWindKit.Core.Tests/BlazorWindKit.Core.Tests.csproj --configuration Release --no-restore --verbosity minimal
          echo "::endgroup::"

      - name: Run unit tests
        run: |
          echo "::group::🧪 Run Tests"
          dotnet test BlazorWindKit.Core.Tests/BlazorWindKit.Core.Tests.csproj --configuration Release --no-build --no-restore --verbosity normal
          echo "::endgroup::"

  pack-and-publish:
    name: 📦 Pack & Publish
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout repository (full clone)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Install Nerdbank.GitVersioning CLI
        run: dotnet tool install --global nbgv

      - name: Add .dotnet/tools to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Extract version from Git tag
        run: |
          echo "::group::🧭 Extracting version from tag"
          VERSION=${GITHUB_REF#refs/tags/v}
          if [ -z "$VERSION" ]; then
            echo "❌ Tag version is empty. Failing."
            exit 1
          fi
          echo "Extracted version: $VERSION"
          echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV
          echo "::endgroup::"

      - name: Pack NuGet package
        run: |
          echo "::group::📦 Pack BlazorWindKit.Core"
          dotnet pack BlazorWindKit.Core/BlazorWindKit.Core.csproj \
            --configuration Release \
            --no-build \
            --output ./artifacts \
            -p:PackageVersion=${{ env.PACKAGE_VERSION }}
          echo "::endgroup::"

      - name: Restore dependencies
        run: |
          echo "::group::🔧 Restore BlazorWindKit.Core"
          dotnet restore BlazorWindKit.Core/BlazorWindKit.Core.csproj --verbosity minimal
          echo "::endgroup::"

      - name: Build BlazorWindKit.Core
        run: |
          echo "::group::🔨 Build BlazorWindKit.Core"
          dotnet build BlazorWindKit.Core/BlazorWindKit.Core.csproj --configuration Release --no-restore --verbosity minimal
          echo "::endgroup::"

      - name: Pack NuGet package
        run: |
          echo "::group::📦 Pack BlazorWindKit.Core"
          dotnet pack BlazorWindKit.Core/BlazorWindKit.Core.csproj \
            --configuration Release \
            --no-build \
            --output ./artifacts \
            -p:PackageVersion=${{ env.PACKAGE_VERSION }}
          echo "::endgroup::"

      - name: Configure GitHub Packages source
        run: |
          dotnet nuget add source \
            --username ${{ github.actor }} \
            --password ${{ secrets.GITHUB_TOKEN }} \
            --store-password-in-clear-text \
            --name github \
            "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

      - name: Publish to GitHub Packages
        run: |
          dotnet nuget push ./artifacts/*.nupkg \
            --source github \
            --api-key ${{ secrets.GITHUB_TOKEN }}
